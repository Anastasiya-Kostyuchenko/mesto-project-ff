{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/api.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/validation.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["export const cohortId = \"wff-cohort-24\";\nexport const apiToken = \"1f0c507e-d045-450a-a244-e6e5498819e0\";\n\n// Функция для проверки ответа сервера\nexport function checkResponse(res) {\n  if (res.ok) {\n    return res.json();\n  }\n  return Promise.reject(`Ошибка: ${res.status}`);\n}\n\n// Получение данных пользователя с сервера\nexport function getUserInfo() {\n  return fetch(`https://nomoreparties.co/v1/${cohortId}/users/me`, {\n    headers: {\n      authorization: apiToken,\n    },\n  }).then(checkResponse);\n}\n\n// Обновление данных профиля\nexport function updateProfile(name, about) {\n  return fetch(`https://nomoreparties.co/v1/${cohortId}/users/me`, {\n    method: \"PATCH\",\n    headers: {\n      authorization: apiToken,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      name: name,\n      about: about,\n    }),\n  }).then(checkResponse);\n}\n\n// Получение всех карточек\nexport function getCards() {\n  return fetch(`https://nomoreparties.co/v1/${cohortId}/cards`, {\n    headers: {\n      authorization: apiToken,\n    },\n  }).then(checkResponse);\n}\n\n// Добавление новой карточки функция\nexport function addCard(name, link) {\n  return fetch(`https://nomoreparties.co/v1/${cohortId}/cards`, {\n    method: \"POST\",\n    headers: {\n      authorization: apiToken,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      name: name,\n      link: link,\n    }),\n  }).then(checkResponse);\n}\n\n// Удаление карточки\nexport function deleteCard(cardId) {\n  return fetch(`https://nomoreparties.co/v1/${cohortId}/cards/${cardId}`, {\n    method: \"DELETE\",\n    headers: {\n      authorization: apiToken,\n    },\n  }).then(checkResponse);\n}\n\n// Функция для постановки лайка\nexport function likeCard(cardId) {\n  return fetch(\n    `https://nomoreparties.co/v1/${cohortId}/cards/likes/${cardId}`,\n    {\n      method: \"PUT\",\n      headers: {\n        authorization: apiToken,\n      },\n    }\n  ).then(checkResponse);\n}\n\n// Функция для снятия лайка\nexport function unlikeCard(cardId) {\n  return fetch(\n    `https://nomoreparties.co/v1/${cohortId}/cards/likes/${cardId}`,\n    {\n      method: \"DELETE\",\n      headers: {\n        authorization: apiToken,\n      },\n    }\n  ).then(checkResponse);\n}\n","import {\n  getUserInfo,\n  getCards,\n  addCard,\n  deleteCard,\n  likeCard,\n  unlikeCard,\n} from \"../api\";\n\n// Создание карточки\nexport function createCard(template, cardData, userId) {\n  const cardElement = template.content\n    .querySelector(\".places__item\")\n    .cloneNode(true);\n  const cardImage = cardElement.querySelector(\".card__image\");\n  const likeCounter = cardElement.querySelector(\".card__like-counter\");\n  const likeButton = cardElement.querySelector(\".card__like-button\");\n  const deleteButton = cardElement.querySelector(\".card__delete-button\");\n\n  cardImage.setAttribute(\"src\", cardData.link);\n  cardImage.setAttribute(\"alt\", cardData.name);\n  cardElement.querySelector(\".card__title\").textContent = cardData.name;\n\n  const isLiked = cardData.likes.some((user) => user._id === userId);\n  if (isLiked) {\n    likeButton.classList.add(\"card__like-button_is-active\");\n  }\n\n  // Обновление счетчика лайков\n  if (likeCounter) {\n    likeCounter.textContent = cardData.likes.length;\n  } else {\n    console.error(\"Элемент likeCounter не найден\");\n  }\n\n  // Обработчик клика на кнопку лайка\n  likeButton.addEventListener(\"click\", () => {\n    const isLiked = likeButton.classList.contains(\n      \"card__like-button_is-active\"\n    );\n    const action = isLiked ? unlikeCard : likeCard;\n\n    action(cardData._id)\n      .then((updatedCardData) => {\n        if (isLiked) {\n          likeButton.classList.remove(\"card__like-button_is-active\");\n        } else {\n          likeButton.classList.add(\"card__like-button_is-active\");\n        }\n\n        if (likeCounter) {\n          likeCounter.textContent = updatedCardData.likes.length;\n        }\n      })\n      .catch((err) => {\n        console.error(`Ошибка при изменении лайка: ${err}`);\n      });\n  });\n\n  if (!deleteButton) {\n    console.error(\"Кнопка удаления не найдена\");\n    return cardElement;\n  }\n\n  if (cardData.owner._id === userId) {\n    deleteButton.addEventListener(\"click\", () => {\n      deleteCard(cardData._id)\n        .then(() => {\n          cardElement.remove();\n        })\n        .catch((err) => {\n          console.error(`Ошибка при удалении карточки: ${err}`);\n        });\n    });\n  } else {\n    deleteButton.remove();\n  }\n\n  return cardElement;\n}\n","let openedPopup = null; // Переменная для хранения открытого попапа\n\n// Универсальная функция открытия попапов\nexport function openPopup(popup) {\n  popup.classList.add(\"popup_is-opened\");\n  openedPopup = popup;\n  document.addEventListener(\"keydown\", handleEscClose);\n}\n\n// Универсальная функция закрытия попапов\n\nexport function closePopup(popup) {\n  popup.classList.remove(\"popup_is-opened\");\n  function handleTransitionEnd() {\n    popup.classList.remove(\"popup_is-opened\");\n    popup.removeEventListener(\"transitionend\", handleTransitionEnd);\n  }\n  popup.addEventListener(\"transitionend\", handleTransitionEnd);\n\n  openedPopup = null;\n  document.removeEventListener(\"keydown\", handleEscClose);\n}\n\n// Закрытие по клавише Escape\nexport function handleEscClose(evt) {\n  if (evt.key === \"Escape\") {\n    if (openedPopup) {\n      closePopup(openedPopup);\n    }\n  }\n}\n\nexport function setPopupListeners() {\n  // Закрытие попапа по клику на оверлей\n  const popups = document.querySelectorAll(\".popup\");\n  popups.forEach((popup) => {\n    popup.addEventListener(\"click\", (evt) => {\n      if (\n        evt.target === evt.currentTarget ||\n        evt.target.classList.contains(\"popup__close\")\n      ) {\n        closePopup(popup);\n      }\n    });\n  });\n}\n","// Функция для показа ошибки валидации\nexport function showInputError(\n  formElement,\n  inputElement,\n  errorMessage,\n  config\n) {\n  inputElement.classList.add(config.inputErrorClass);\n  const errorElement = formElement.querySelector(`.${inputElement.name}-error`);\n  errorElement.textContent = errorMessage;\n  errorElement.classList.add(config.errorClass);\n}\n\n// Функция для скрытия ошибки валидации\nexport function hideInputError(formElement, inputElement, config) {\n  const errorElement = formElement.querySelector(`.${inputElement.name}-error`);\n  inputElement.classList.remove(config.inputErrorClass);\n  errorElement.classList.remove(config.errorClass);\n  errorElement.textContent = \"\";\n}\n\n// Проверка поля на валидность\nexport function checkInputValidity(formElement, inputElement, config) {\n  const regex = /^[a-zA-Zа-яА-ЯёЁ\\s-]+$/;\n  const isNameOrTitleField =\n    inputElement.name === \"name\" || inputElement.name === \"place-name\";\n\n  if (isNameOrTitleField && !regex.test(inputElement.value)) {\n    inputElement.setCustomValidity(\n      \"Разрешены только латинские, кириллические буквы, знаки дефиса и пробелы\"\n    );\n  } else {\n    inputElement.setCustomValidity(\"\");\n  }\n\n  if (!inputElement.validity.valid) {\n    showInputError(\n      formElement,\n      inputElement,\n      inputElement.validationMessage,\n      config\n    );\n  } else {\n    hideInputError(formElement, inputElement, config);\n  }\n}\n\n// Проверка состояния кнопки отправки\nexport function toggleButtonState(inputList, buttonElement, config) {\n  const isFormValid = inputList.every(\n    (inputElement) => inputElement.validity.valid\n  );\n\n  if (isFormValid) {\n    buttonElement.disabled = false;\n    buttonElement.classList.remove(config.inactiveButtonClass);\n  } else {\n    buttonElement.disabled = true;\n    buttonElement.classList.add(config.inactiveButtonClass);\n  }\n}\n\n// Навешиваем обработчики событий на форму\nexport function setEventListeners(formElement, config) {\n  const inputList = Array.from(\n    formElement.querySelectorAll(config.inputSelector)\n  );\n  const buttonElement = formElement.querySelector(config.submitButtonSelector);\n\n  inputList.forEach((inputElement) => {\n    inputElement.addEventListener(\"input\", () => {\n      checkInputValidity(formElement, inputElement, config);\n      toggleButtonState(inputList, buttonElement, config);\n    });\n  });\n}\n\n// Функция включения валидации\nexport function enableValidation(config) {\n  const formList = Array.from(document.querySelectorAll(config.formSelector));\n\n  formList.forEach((formElement) => {\n    formElement.addEventListener(\"submit\", (evt) => {\n      evt.preventDefault();\n    });\n\n    setEventListeners(formElement, config);\n  });\n}\n\n// Очистка ошибок валидации и сброс состояния кнопки\nexport function clearValidation(formElement, config) {\n  const inputList = Array.from(\n    formElement.querySelectorAll(config.inputSelector)\n  );\n  const buttonElement = formElement.querySelector(config.submitButtonSelector);\n\n  inputList.forEach((inputElement) => {\n    hideInputError(formElement, inputElement, config);\n    inputElement.value = \"\";\n  });\n\n  toggleButtonState(inputList, buttonElement, config);\n}\n","import \"./index.css\";\nimport { createCard, deleteCard } from \"./components/card.js\";\nimport {\n  openPopup,\n  closePopup,\n  setPopupListeners,\n} from \"./components/modal.js\";\nimport {\n  enableValidation,\n  clearValidation,\n  showInputError,\n  hideInputError,\n  checkInputValidity,\n  toggleButtonState,\n  setEventListeners,\n} from \"./validation.js\";\nimport {\n  getUserInfo,\n  getCards,\n  updateProfile,\n  addCard,\n  checkResponse,\n  cohortId,\n  apiToken,\n} from \"./api.js\";\n\n// Переменные\nconst cardTemplate = document.querySelector(\"#card-template\");\nconst placesList = document.querySelector(\".places__list\");\nconst editPopup = document.querySelector(\".popup_type_edit\");\nconst addCardPopup = document.querySelector(\".popup_type_new-card\");\nconst editButton = document.querySelector(\".profile__edit-button\");\nconst addButton = document.querySelector(\".profile__add-button\");\nconst editProfileForm = editPopup.querySelector(\".popup__form\");\nconst addCardForm = addCardPopup.querySelector(\".popup__form\");\nconst nameInput = document.querySelector(\".popup__input_type_name\");\nconst jobInput = document.querySelector(\".popup__input_type_description\");\nconst profileName = document.querySelector(\".profile__title\");\nconst profileJob = document.querySelector(\".profile__description\");\nconst cardNameInput = document.querySelector(\".popup__input_type_card-name\");\nconst cardUrlInput = document.querySelector(\".popup__input_type_url\");\nconst cardForm = document.querySelector('form[name=\"new-place\"]');\nconst imagePopup = document.querySelector(\".popup_type_image\");\nconst imageElement = imagePopup.querySelector(\".popup__image\");\nconst captionElement = imagePopup.querySelector(\".popup__caption\");\n\nconst profileImage = document.querySelector(\".profile__image\");\n\nsetPopupListeners();\n\n// Обработчик открытия попапа редактирования профиля\neditButton.addEventListener(\"click\", () => {\n  nameInput.value = profileName.textContent;\n  jobInput.value = profileJob.textContent;\n  clearValidation(editProfileForm, validationConfig);\n  openPopup(editPopup);\n});\n\n// Обработчик сохранения данных профиля\neditProfileForm.addEventListener(\"submit\", (evt) => {\n  evt.preventDefault();\n  renderLoading(true, submitButton, \"Сохранение...\");\n  updateProfile(nameInput.value, jobInput.value)\n    .then((updatedUserData) => {\n      profileName.textContent = updatedUserData.name;\n      profileJob.textContent = updatedUserData.about;\n      closePopup(editPopup);\n    })\n    .catch((err) => {\n      console.error(`Ошибка обновления профиля: ${err}`);\n    })\n    .finally(() => {\n      renderLoading(false, submitButton, \"Сохранить\");\n    });\n});\n\n// Обработчик открытия попапа добавления карточки\naddButton.addEventListener(\"click\", () => {\n  clearValidation(addCardForm, validationConfig);\n  openPopup(addCardPopup);\n});\n\n// Включение валидации для всех форм\nconst validationConfig = {\n  formSelector: \".popup__form\",\n  inputSelector: \".popup__input\",\n  submitButtonSelector: \".popup__button\",\n  inactiveButtonClass: \"popup__button_disabled\",\n  inputErrorClass: \"popup__input_type_error\",\n  errorClass: \"popup__error_visible\",\n};\n\nenableValidation(validationConfig);\n\nlet userId;\n\nPromise.all([getUserInfo(), getCards()])\n  .then(([userData, cards]) => {\n    profileName.textContent = userData.name;\n    profileJob.textContent = userData.about;\n    if (!Array.isArray(cards)) {\n      console.error(\"cards не является массивом\");\n      return;\n    }\n\n    // Отображение карточек на странице\n    cards.forEach((card) => {\n      const cardElement = createCard(cardTemplate, card, userData._id);\n      placesList.append(cardElement);\n    });\n  })\n  .catch((err) => {\n    console.error(`Ошибка получения данных с сервера: ${err}`);\n  });\n\n// Обработчик добавления новой карточки\ncardForm.addEventListener(\"submit\", (evt) => {\n  evt.preventDefault();\n  renderLoading(true, submitButton, \"Сохранение...\");\n  addCard(cardNameInput.value, cardUrlInput.value)\n    .then((newCardData) => {\n      const cardElement = createCard(cardTemplate, newCardData, userId);\n      placesList.prepend(cardElement);\n      closePopup(addCardPopup);\n      cardForm.reset();\n    })\n    .catch((err) => {\n      console.error(`Ошибка добавления карточки: ${err}`);\n    })\n    .finally(() => {\n      renderLoading(false, submitButton, \"Сохранить\");\n    });\n});\n\nconst avatarPopup = document.querySelector(\".popup_type_avatar\");\nconst avatarOpenButton = document.querySelector(\".profile__image\");\nconst avatarCloseButton = avatarPopup.querySelector(\".popup__close\");\nconst avatarForm = document.querySelector('form[name=\"avatar-form\"]'); // Переместите сюда\nconst submitButton = avatarForm.querySelector(\".popup__button\"); // Переместите сюда\n\n// Открытие попапа\navatarOpenButton.addEventListener(\"click\", () => {\n  openPopup(avatarPopup);\n  submitButton.disabled = true; // Блокируем кнопку при открытии попапа\n});\n\n// Закрытие попапа\navatarCloseButton.addEventListener(\"click\", () => {\n  closePopup(avatarPopup);\n  avatarForm.reset(); // Сбросить форму при закрытии\n  const errorElement = document.querySelector(\".avatar-error\");\n  errorElement.textContent = \"\"; // Очистить сообщение об ошибке\n});\n\n// Проверка валидности URL перед отправкой\navatarForm.addEventListener(\"submit\", (event) => {\n  event.preventDefault();\n\n  const avatarInput = avatarForm.querySelector(\".popup__input_type_avatar\");\n  const newAvatarUrl = avatarInput.value;\n\n  if (!isValidURL(newAvatarUrl)) {\n    const errorElement = document.querySelector(\".avatar-error\");\n\n    errorElement.textContent = \"Пожалуйста, введите корректный URL.\";\n    return;\n  }\n\n  renderLoading(true, submitButton, \"Сохранение...\");\n\n  fetch(`https://nomoreparties.co/v1/${cohortId}/users/me/avatar`, {\n    method: \"PATCH\",\n    headers: {\n      authorization: apiToken,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ avatar: newAvatarUrl }),\n  })\n    .then(checkResponse)\n    .then((data) => {\n      // Обновляем аватар пользователя\n      profileImage.style.backgroundImage = `url('${newAvatarUrl}')`;\n      closePopup(avatarPopup);\n    })\n    .catch((err) => {\n      console.error(`Ошибка при смене аватара: ${err}`);\n      const errorElement = document.querySelector(\".avatar-error\");\n      errorElement.textContent = \"Не удалось сменить аватар. Попробуйте снова.\";\n    })\n    .finally(() => {\n      renderLoading(false, submitButton, \"Сохранить\");\n    });\n});\n\n// Функция для отображения состояния загрузки\nfunction renderLoading(isLoading, buttonElement, defaultText) {\n  if (isLoading) {\n    buttonElement.textContent = \"Сохранение...\";\n    buttonElement.disabled = true;\n  } else {\n    buttonElement.textContent = defaultText;\n    buttonElement.disabled = false;\n  }\n}\n\n// Функция для проверки валидности URL\nfunction isValidURL(url) {\n  const urlPattern =\n    /^(https?:\\/\\/)?([\\w\\-]+)\\.([a-z]{2,6}\\.?)(\\/[\\w\\-.~:?#[\\]@!$&'()*+,;=]*)*\\/?$/i;\n  return urlPattern.test(url);\n}\n"],"names":["cohortId","apiToken","checkResponse","res","ok","json","Promise","reject","concat","status","likeCard","cardId","fetch","method","headers","authorization","then","unlikeCard","createCard","template","cardData","userId","cardElement","content","querySelector","cloneNode","cardImage","likeCounter","likeButton","deleteButton","setAttribute","link","name","textContent","likes","some","user","_id","classList","add","length","console","error","addEventListener","isLiked","contains","updatedCardData","remove","catch","err","owner","openedPopup","openPopup","popup","document","handleEscClose","closePopup","handleTransitionEnd","removeEventListener","evt","key","hideInputError","formElement","inputElement","config","errorElement","inputErrorClass","errorClass","toggleButtonState","inputList","buttonElement","every","validity","valid","disabled","inactiveButtonClass","clearValidation","Array","from","querySelectorAll","inputSelector","submitButtonSelector","forEach","value","cardTemplate","placesList","editPopup","addCardPopup","editButton","addButton","editProfileForm","addCardForm","nameInput","jobInput","profileName","profileJob","cardNameInput","cardUrlInput","cardForm","imagePopup","profileImage","target","currentTarget","validationConfig","about","preventDefault","renderLoading","submitButton","body","JSON","stringify","updatedUserData","finally","formSelector","test","setCustomValidity","errorMessage","showInputError","validationMessage","checkInputValidity","setEventListeners","all","_ref","_ref2","userData","cards","isArray","card","append","newCardData","prepend","reset","avatarPopup","avatarOpenButton","avatarCloseButton","avatarForm","isLoading","defaultText","event","newAvatarUrl","avatar","data","style","backgroundImage"],"sourceRoot":""}